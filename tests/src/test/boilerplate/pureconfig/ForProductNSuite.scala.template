package pureconfig

import java.util.UUID

import com.typesafe.config._
import org.scalacheck._
import org.scalacheck.ScalacheckShapeless._
import pureconfig.error._
import pureconfig.syntax._

class ForProductNSuite extends BaseSuite {
  behavior of "ConfigReader.forProductN and ConfigWriter.forProductN"

  [#case class Foo1([#s0: String#])
  object Foo1 {
    val keys = List([#UUID.randomUUID().toString#])
    implicit val foo1Writer = ConfigWriter.forProduct1([#keys(0)#])((Foo1.unapply _).andThen(_.get))
    implicit val foo1Reader = ConfigReader.forProduct1([#keys(0)#])(Foo1.apply)
  }
  checkArbitrary[Foo1]

  val bitmaskGen1 = Gen.choose(0, (##1 << 1) - ##2)
  it should "produce ConfigReaders returning correct KeyNotFound failures in the absence of certain keys for arity 1" in
  forAll(bitmaskGen1, Arbitrary.arbitrary[Foo1]) { (bitmask, foo) =>
    val conf = foo.toConfig
    val missingKeys = Foo1.keys.zipWithIndex.filter({ case (_, i) => (bitmask & ##1 << i) == ##0 }).map(_._##1)
    val confWithMissingKeys = missingKeys.foldLeft(conf.asInstanceOf[ConfigObject])(_.withoutKey(_))
    val failures = missingKeys.map(k => ConvertFailure(KeyNotFound(k, Set.empty), Some(ConfigOriginFactory.newSimple("empty config")), ""))
    val result = confWithMissingKeys.to[Foo1]
    result.left.value.toList.size shouldEqual failures.size
    result.left.value.toList should contain theSameElementsAs failures
  }

  it should "produce ConfigReaders respecting the ReadsMissingKeys trait for arity 1" in
  forAll(bitmaskGen1) { bitmask =>
    val foo = Foo1([#UUID.randomUUID().toString#])
    implicit val missingStringReader = new ConfigReader[String] with ReadsMissingKeys {
      def from(cur: ConfigCursor): ConfigReader.Result[String] =
        if (cur.isUndefined || cur.isNull) Right("missing")
        else cur.asString
    }
    val conf = foo.toConfig
    val missingKeys = Foo1.keys.zipWithIndex.filter({ case (_, i) => (bitmask & ##1 << i) == ##0 }).map(_._##1)
    val confWithMissingKeys = missingKeys.foldLeft(conf.asInstanceOf[ConfigObject])(_.withoutKey(_))
    val fooKeys = Foo1.keys
    val fooReader = ConfigReader.forProduct1([#fooKeys(0)#])(Foo1.apply)
    fooReader.from(ConfigCursor.apply(confWithMissingKeys, List.empty)).right.value shouldEqual Foo1(
      [#if ((bitmask & ##1 << 0) == ##0) "missing" else foo.s0#])
  }

  it should "produce ConfigWriters respecting the WritesMissingKeys trait for arity 1" in
  forAll(bitmaskGen1) { bitmask =>
    implicit val emptyStringWriter = new ConfigWriter[String] with WritesMissingKeys[String] {
      def to(v: String) = ConfigValueFactory.fromAnyRef(v)
      def toOpt(v: String) = if (v.isEmpty) None else Some(to(v))
    }
    val newFoo = Foo1(
      [#if ((bitmask & ##1 << 0) == ##0) "" else UUID.randomUUID().toString#])
    val fooKeys = Foo1.keys
    val missingKeys = fooKeys.zipWithIndex.filter({ case (_, i) => (bitmask & ##1 << i) == ##0 }).map(_._##1)
    val fooWriter = ConfigWriter.forProduct1([#fooKeys(0)#])((Foo1.unapply _).andThen(_.get))
    val conf = fooWriter.to(newFoo)
    conf.asInstanceOf[ConfigObject].keySet should not(contain theSameElementsAs missingKeys)
  }#

  ]
}
